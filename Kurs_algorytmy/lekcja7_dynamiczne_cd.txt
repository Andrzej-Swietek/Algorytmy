06.03.2021 12:00

Mateusz Filipowicz [jestem]
Paulina Nguyen [ok]
Andrzej Wróblewski[OK]
Adam Pawlak[OK]
Krzysztof Ligarski [ok]
Dominik Szczepaniak [jestem]
Wiktor Stojek [OK]
Andrzej Świętek [ok]
Piotr Bonar
Damian Żabicki[ok]
Jerzy Puchalski
Grzegorz Iwaszkiewicz[ok]
Mikołaj Szczerbetka [jestem]


Praca domowa:
Sznurki (str. 96)

n w
8 4
1 2 3|4|8|1 1 3|

  --- - -   ---
   5  4 8    4

#include <bits/stdc++.h>
using namespace std;
#define ll long long

int main()
{
    //freopen("262144.in", "r", stdin);
    //freopen("262144.out", "w", stdout);
    int n, x;
    cin >> n >> x;
    vector<int> sznurki(n);
    for(int i = 0; i<n; i++){
        cin >> sznurki[i];
    }
    int ans = 0;
    while(sznurki.size() > 1){
        if(sznurki[sznurki.size()-1] < x){
            sznurki[sznurki.size()-2] += sznurki[sznurki.size()-1];
            sznurki.pop_back();
        }
        else{
            ans++;
            sznurki.pop_back();
        }
    }
    if(sznurki[0] >= x){
        ans++;
    }
    cout << ans << endl;
    return 0;
}


// Krzysztof L.
#include <iostream>
using namespace std;

int main()
{
    int n, height;
    cin >> n >> height;

    int length[n];
    for (int i = 0; i < n; i++)
    {
        cin >> length[i];
    }

    int result = 0, current = 0;
    for (int i = 0; i < n; i++)
    {
        current += length[i];
        if (current >= height)
        {
            result++;
            current = 0;
        }
    }
    cout << result;
    return 0;
}


#include <iostream>
using namespace std;

int main()
{
    int n, height;
    cin >> n >> height;

    int result = 0, current = 0;
    for (int i = 0; i < n; i++)
    {
        int length;
        cin >> length;
        current += length;
        if (current >= height)
        {
            result++;
            current = 0;
        }
    }
    cout << result;
    return 0;
}


Pionek (str. 104)

5
3 1 -2 -1 3
*

wynik[i] - największa suma, którą można uzyskać jeśli zakładamy, że kończymy wędrówkę w polu nr i

............................... i ..............
wynik[i - 1]
wynik[i - 2]
wynik[i - 3]
wynik[i - 4]
wynik[i - 5]
wynik[i - 6]


{1, 2}
  1  4 -2  1 -3 -3 -3  2 -1 -2
  1  5  3  6  3  3  0  5  4  3
wynik[i] = max(wynik[i - 1], wynik[i - 2]) + A[i]


// Krzysztof L.
#include <iostream>
using namespace std;

int main()
{
    int n;
    cin >> n;

    int value[n];
    for (int i = 0; i < n; i++)
    {
        cin >> value[i];
    }

    for (int i = 1; i < n; i++)
    {
        int maxval = INT32_MIN;
        for (int j = i - 1; j >= 0 && j >= i - 6; j--)
        {
            maxval = max(maxval, value[j]);
        }
        value[i] += maxval;
    }
    cout << value[n - 1] << "\n";
    return 0;
}

Czas: O(N)
Pamięć: O(N)


          5 0 1 2 3  4
          ************
0 1 2 3 4 5 6 7 8 9 10 11 12 13
                     ?

                          value[i]

#include <iostream>
using namespace std;

int main()
{
    int n;
    cin >> n;
    int value[6];
    for (int i = 0; i < n; i++)
    {
        int a;
        cin >> a;
        int maxval = INT32_MIN;
        for (int j = i - 1; j >= 0 && j >= i - 6; j--)
        {
            maxval = max(maxval, value[j % 6]);
        }
        value[i % 6] = a + maxval;
    }
    cout << value[(n - 1) % 6] << "\n";
    return 0;
}

Czas: O(N)
Pamięć: O(1)


Jaką największą sumę można wybrać nie biorąc dwóch kolejnych elementów?

Wejście:
6
4 2 5 1 2 4
*   *     *

Wyjście:
13


wynik[i] - jaki jest największy wynik, że kończymy w i-tym polu (i to pole wybieramy)
wynik[i] = max(wynik[i - 2], wynik[i - 3]) + A[i]

wynik całego zadania = max(wynik[1], wynik[2], ..., wynik[n])
wynik całego zadania max(wynik[n-1], wynik[n])

x x x x(x)x x


Jeśli A[i] >= 0

x x x(x)x x x [x]
               i

Jak konstrujemy dynamika?
1) jakie mamy stany?
2) jak liczymy pojedynczy stan? w jakiej kolejności liczymy stany? od i = 1 do i = n
3) gdzie jest wynik?


Wersja -10^9 <= A[i] <= 10^9?

6
3 -1 -1 -1 2 4
3  3  3  3 5 7 <- wyniki


wynik[i] - jaka jest największa suma dla fragmentu A[1], A[2], ..., A[i]
wynik[i] =

if(A[i] >= 0){
    wynik[i] = max(wynik[i-2],wynik[i-3]) + A[i];
}
else{
    wynik[i] = max(wynik[i-1], wynik[i-2]);
}


wynik[3]

    0   1   2   3
    5   5   5   1 <- A[i]
    5   5  10   6 <- wynik[i]


wynik[i][TAK\NIE] - wynik dla prefiksu A[1], A[2], ..., A[i] przy założenie, że biorę/nie biorę ostatni element A[i]
wynik[i][0] -> NIE
wynik[i][1] -> TAK


              5   5   5   1
wynik[i][0]   0   5   5  10
wynik[i][1]   5   5  10   6


             x x x x x(x) ...
wynik[i][0] = max(wynik[i - 1][0], wynik[i - 1][1]);
wynik[i][1] = A[i] + max(wynik[i - 2][0], wynik[i - 2][1])


              5  -3   -3   2  -2  4
wynik[i][0]   0   5    5   5   7  7
wynik[i][1]   5  -3    2   5   3  11



Kod:
#include <algorithm>
#include <iostream>
using namespace std;

int main() {
  int n;
  cin >> n;
  int A[n + 5];
  for (int i = 1; i <= n; i++) {
    cin >> A[i];
  }

  int wynik[n + 5][2];
  wynik[0][0] = 0;
  wynik[0][1] = 0;
  for (int i = 1; i <= n; i++) {
    wynik[i][0] = max(wynik[i - 1][0], wynik[i - 1][1]);
    wynik[i][1] = A[i] + max(wynik[max(0, i - 2)][0], wynik[max(0, i - 2)][1]);
  }
  cout << max(wynik[n][0], wynik[n][1]);

  return 0;
}




Problem znajdowania najdłuższego wspólnego podciągu:
S1 = "alamakota"
      *  ***
S2 = "nabmaxk"
       * ** *

Dane są dwa słowa S1 i S2. |S1|, |S2| <= 1000 liter.
Cel: długość najdłuższego wspólnego podciągu.

wynik[i][j] = wynik dla słów S1[1]..S1[i] oraz S2[1]..S2[j].

    a l a m a k o t a
  n 0 0 0 0 0 0 0 0 0
  a 1 1 1 1 1 1 1 1 1
  b 1 1 1 1 1 1 1 1 1
  m 1 1 1 2 2 2 2 2 2
  a 1 1 2 2 3 3 3 3 3
  x 1 1 2 2 3 3 3 3 3
  k 1 1 2 2 3 4 4 4 4

 S1 xxxxA
 S2 xxB

if S1[i] == S2[j]:
    wynik[i][j] = 1 + wynik[i-1][j-1]
else:
    wynik[i][j] = max(wynik[i-1][j], wynik[i][j-1])

Czas: O(|S1| * |S2|)



Praca domowa:
1) Przeczytać: https://pl.wikipedia.org/wiki/Najd%C5%82u%C5%BCszy_wsp%C3%B3lny_podci%C4%85g
2) Implementacja Najdłuższego wspólnego podciągu
Wejście:
alamakota
nabmaxk
Wyjście:
4
3) Rozkminić i najlepiej zaimplementować zadania: Bracia (str. 97), Szklanki (str. 98), Wybrzeże (str. 105)











Jaki jest najdłuższy podciąg, że najpierw same 'a', potem 'b' i 'c'?

Najdłuższy podciąg rosnący

Najdłuższy podciąg, który jest palindromem

Dwumian Newtona

27.03.2021 12:00


Mateusz Filipowicz[ok]
Paulina Nguyen [ok]
Andrzej Wróblewski[OK]
Adam Pawlak[OK]
Krzysztof Ligarski [OK]
Dominik Szczepaniak [ok]
Wiktor Stojek
Andrzej Świętek [ok]
Piotr Bonar[ok]
Damian Żabicki[ok]
Jerzy Puchalski
Grzegorz Iwaszkiewicz[ok]
Mikołaj Szczerbetka[ok]
Krzysztof Mazurkiewicz [ok]


- Implementacja Bracia
//Dominik
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define pb push_back

int main() {
    int n;
    cin >> n;
    vector<pair<int, int>> bracia(1000005); //<ostatni z braci, pierwszy z braci>
    for(int i = 0; i<n; i++){
        int a;
        cin >> a;
        if(bracia[a].second == 0){
            bracia[a].second = i+1;
        }
        bracia[a].first = i+1;
    }
    sort(bracia.begin(), bracia.end());
    int ostatni = 0;
    int wynik = 0;
    for(int i = 0; i<1000005; i++){
        if(ostatni <= bracia[i].second && bracia[i].second != 0){
            wynik++;
            ostatni = bracia[i].first;
        }
    }
    cout << wynik << endl;

    return 0;
}


Zadanie 1: Ładny ciąg
Ile jest ciągów o długości n, których wartości są z przedziału [0..K]
oraz każde dwa sąsiednie elementy <= 1.
Wynik podać modulo q.
Dane: N <= 1000, K <= 1000


Rozwiązanie wolne - generujemy wszystkie ciągi
0 0 0
    1

0 1 0
0 1 1
0 1 2
1
..
k


DP[n][x] - wynik, czyli liczba ciągów o długości n, których wartości są z przedziału [0..K],
           oraz ostatni element = x

Policzmy DP[n][k] dla każdego 1 <= n <= N oraz 0 <= k <= K.

N = 6 K = 3

k 1 2 3 4 5 6 <- n
0 1
1 1
2 1     ?
3 1        ?


DP[1][x] = 1
DP[n][x] = DP[n-1][x-1] + DP[n-1][x] + DP[n-1][x+1]


_ _ _ _ x
     x-1
     x
     x+1


#include<iostream>
using namespace std;

const int MAX = 1000;

int DP[MAX + 5][MAX + 5];

int main() {
    int N, K, q;
    cin >> N >> K >> q;

    for(int k = 0; k <= K; k++) {
        DP[1][k] = 1;
    }

    for(int n = 2; n <= N; n++) {
        for(int k = 0; k <= K; k++) {
            if(k > 0) DP[n][k] = DP[n - 1][k - 1];
            DP[n][k] = (DP[n][k] + DP[n - 1][k]) % q;
            if(k < K) DP[n][k] = (DP[n][k] + DP[n - 1][k + 1]) % q;
        }
    }

    for(int zapytanie = 1; zapytanie <= N; zapytanie++) {
        int n;
        cin >> n;

        int wynik = 0;
        for(int ostatni = 0; ostatni <= K; ostatni++) {
            wynik = (wynik + DP[n][ostatni]) % q;
        }
        cout << wynik << " ";
    }
    return 0;
}


- Wybrzeże (str. 105)

    0 1 2 3 4 5
0   0 1 2 3 4 5 -> 0
1   0 1 1 2 3 3 -> 1
2   x x x x x x -> 0
3   x x x x x x -> 1

2  ..........
3  ..........

poprzedni 0
aktualny  1

80 000 = 80kB <= 32 mB


//Damian
#include <bits/stdc++.h>
using namespace std;

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	int n, k;
	cin>>n>>k;
	int tab[n];
	int dp[k+1][n+1];
	for (int i=0;i<n;i++) cin>>tab[i];
	for (int j=0;j<n;j++) dp[0][j]=j;
	for (int i=1;i<=k;i++){
		for (int j=0;j<n;j++) dp[i][j]=dp[i-1][j];
		for (int j=0;j<n;j++) {
			if (tab[j]>=0){
				dp[i][tab[j]]=min(dp[i][tab[j]], dp[i-1][j]+1);
			}
		}
		for (int j=1;j<n;j++) dp[i][j]=min(dp[i][j], dp[i][j-1]+1);
	}
	int wynik=dp[k][n-1];
	cout<<wynik;
}

10 000 * 10 000 = 10^8 intow
400 000 000 bajtow
400 000 kB
400 mB


Zadanie 1 https://codeforces.com/problemset/problem/446/A:

N <= 100,000
A[i] <= 10^9

7
5 1 3 1 5 9 2
  *********
  1 3 4 5 9

Wyjście:
5

*****%*?**%.....%...

5 1 3 1 5 9 2

pair<int, pair<int, int>> //

1, <0, 0>   2, <1, 1>       2, <0, 0>       3, <1, 1>    4 <1, 1>    5<1, 1>     1, <0, 0>


   5 1 3(1)5 9 2
L  1 1 2 1 2 3 1
   1 2 1 3 2 1 1 P

Zadanie 2:
Dany jest tekst z liter 'a', 'b', 'c'.
Długość <= 100,000.
Wybrać najdłuższy podciąg, który jest postaci "aaaaaabbbbbbbbbccccccc".

Wejście:
abacababcba
* * ** **
a a ab bc


Wyjście:
6


Czas: 13:14

a        b        a    c     a      b    a     b     c     b     a
1,0,0   1,1,0  2,1,0 2,1,1 2,2,1 3,2,1  4,2,1  4,3,1 4,3,2 4,4,2 5,4,2
                                          *                 *

    a b a c a b a b c b a
a   1 1 2 2 3 3 4 4 4 4 5
ab  1 2 2 2 3 ?
abc

DP[i][ab] = max(DP[i][a], DP[i - 1][ab], if S[i] == 'b' 1 + DP[i - 1][ab])
DP[i][abc] = max(DP[i][ab], DP[i-1][abc], if S[i] == 'c' 1 + DP[i - 1][abc])



Praca domowa:
Implementacja https://codeforces.com/problemset/problem/446/A
Implementacja Jaki jest najdłuższy podciąg, że najpierw same 'a', potem 'b' i 'c'?
Do pomyślenia: https://www.spoj.com/SHORTEN/problems/BINOMIAL/
Do pomyślenia: Najdłuższy podciąg rosnący https://www.spoj.com/problems/ELIS



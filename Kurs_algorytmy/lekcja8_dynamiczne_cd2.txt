20.03.2021 12:00

Bartek Łukasiewicz [obecny]

Mateusz Filipowicz [ok]
Paulina Nguyen [ok]
Andrzej Wróblewski [OK]
Adam Pawlak[OK]
Krzysztof Ligarski [OK]
Dominik Szczepaniak [ok]
Wiktor Stojek
Andrzej Świętek [ok]
Piotr Bonar
Damian Żabicki [ok]
Jerzy Puchalski
Grzegorz Iwaszkiewicz[ok]
Mikołaj Szczerbetka[ok]
Krzysztof Mazurkiewicz [ok]


Zespoły +
Największy plus +
Płoty

Płot, Największy plus

Youtube: https://www.youtube.com/channel/UCftwMLY2Ets-2_NR3V2gi0g


1) Implementacja Najdłuższego wspólnego podciągu

Wejście:
alamakota
nabmaxk
Wyjście:
4

DP[i][j]

    a l a m a k o t a
  0 0 0 0 0 0 0 0 0 0
n 0 0 0 0 0 0 0 0 0 0
a 0 1 1 1 1 1 1 1 1 1
b 0 1 1 1 1 1 1 1 1 1
m 0 1 1 1 2 2 2 2 2 2
a 0 1
x 0 1
k 0 1               ?

DP[i][j]

if S1[i] == S2[j]
    DP[i][j] = 1 + DP[i - 1][j - 1]
else:
    DP[i][j] = max(DP[i][j - 1], DP[i - 1][j])


S1_1, S1_2, ..., S1_i
S2_1, S2_2, ..., S2_j

xxxxxxxx     ?
xxxxxxxxxxxxxx?


O(|S1| * |S2|)



// Krzysztof L.
#include <iostream>
using namespace std;

int main()
{
    string A, B;
    cin >> A >> B;

    int n = A.length(), m = B.length();
    A = " " + A;
    B = " " + B;

    int lcs[n + 1][m + 1];
    for (int i = 0; i <= n; i++)
    {
        lcs[i][0] = 0;
    }
    for (int i = 0; i <= m; i++)
    {
        lcs[0][i] = 0;
    }

    for (int i = 1; i <= n; i++)
    {
        for (int j = 1; j <= m; j++)
        {
            if (A[i] == B[j])
            {
                lcs[i][j] = lcs[i - 1][j - 1] + 1;
            }
            else
            {
                lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1]);
            }
        }
    }

    cout << lcs[n][m] << "\n";
    return 0;
}


//Dominik
#include <bits/stdc++.h>
using namespace std;
#define ll long long

int main()
{
    string a, b;
    cin >> a;
    cin >> b;
    int n, m;
    n = a.length();
    m = b.length();
    int tab[n+1][m+1];
    for(int i = 0; i<=n;i++){
        tab[i][0] = 0;
    }
    for(int i = 0; i<=m; i++){
        tab[0][i] = 0;
    }
    for(int i = 1; i<=n;i++){
        for(int j = 1; j<=m;j++){
            if(a[i-1] == b[j-1]){
                tab[i][j] = tab[i-1][j-1] + 1;
            }
            else{
                tab[i][j] = max(tab[i-1][j], tab[i][j-1]);
            }
        }
    }
    cout << tab[n][m];
    return 0;
}


Zadanie Bracia (str. 97)

6
1 2 1 2 3 2
-----   -
  ---------


-----1    -----5
 -------2   -4
   ---------3


     --|????????????????????????
  ---|??????????????????????????



O(n * log(n))





Zadanie: Szklanki (str. 98)

4
3 1 3 5
3 3 1 5
3 3 3 3
cel = 3

3 3 1 5
3|3+3+3

|    |       |          |      |

   3
   S ? S ? S ? S ? S ? S
    ->  <-  ->  ->  <-


#include <bits/stdc++.h>
using namespace std;
#define ll long long

int main()
{
    int n;
    cin >> n;
    int szklanki[n];
    int suma = 0;
    for(int i =0;i<n;i++){
        cin >> szklanki[i];
        suma += szklanki[i];
    }
    int cel = suma/n;
    int wynik = 0;
    for(int i=0;i<n-1; i++){
        if(szklanki[i] < cel){
            int a = cel - szklanki[i];
            szklanki[i+1] -= a;
            szklanki[i] += a;
            wynik++;
        }
        else if(szklanki[i] > cel){
            int a = szklanki[i] - cel;
            szklanki[i+1] += a;
            szklanki[i] -= a;
            wynik++;
        }
    }
    cout << wynik << endl;
    return 0;
}


Zadanie: Najdłuższy podciąg, który jest palindromem
|S| <= 1000

   x k g a f j a d k
     *   *   * *   *

   k d a j f a g k x


Poprzednie zadania (S oraz odwrocone(S))



Zadanie:

   1 2 3 4 5 6 7 8
   x a a d x a d a
 1 1 1 1 1 1 1 1 1
 2 1 2 1 1 1 1 1
 3 2 2 1 1 1 3
 4 2 2 2 3 3
 5
 6
 7
 8


DP[i][j] -> Jaki jest wynik dla S[i:j]

DP[i][j]
    i == j -> DP[i][j] = 1
    i == j - 1 -> if S[i] == S[j] -> 2 else 1
    j - i + 1 > 2
    ... xxxxxxxx ...
        *      *
        if S[i] == S[j] -> 2 + DP[i + 1][j - 1]
        else max(DP[i + 1][j], DP[i][j - 1])


Jaki jest najdłuższy podciąg tego fragmentu, który jest palindromem?


#include<iostream>
using namespace std;

const int MAX_N = 10005;

string S;
int n, DP[MAX_N][MAX_N];

int dlugosc(int start, int end){
    if(end - start + 1 == 1){
        return 1;
    }
    if(end - start + 1 == 2){
        if(S[start] == S[end]){
            return 2;
        }
        return 1;
    }
    if(S[start] == S[end]){
        return 2 + DP[start+1][end-1];
    }
    return max(DP[start+1][end], DP[start][end-1]);
}

int main() {
    cin >> S;
    n = S.length();
    S = "?" + S;

    for(int d = 1; d <= n; d++) {
        for(int start = 1; start + d - 1 <= n; start++) {
            int end = start + d - 1;
            DP[start][end] = dlugosc(start, end);
        }
    }

    return 0;
}

Wejście:
xaadxada    długość <= 1000
4   zapytań <= 10^6
3 7
2 3
4 4
5 8
Wyjście:
3
2
1
3

Praca domowa:
- Implementacja Bracia
- Wybrzeże (str. 105)
- Ładny ciąg (str. 106)
- Obejrzeć: Youtube: https://www.youtube.com/channel/UCftwMLY2Ets-2_NR3V2gi0g



Na potem:
Jaki jest najdłuższy podciąg, że najpierw same 'a', potem 'b' i 'c'?
Najdłuższy podciąg rosnący
Dwumian Newtona

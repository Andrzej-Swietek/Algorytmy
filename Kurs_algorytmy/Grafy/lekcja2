24.04.2021 12:00

Praca domowa:
1) Gwiazda/słoneczko to taki graf, który ma wierzchołek środkowy i krawędzie z niego wychodzące do pozostałych wierzchołków.
Sprawdź, czy graf jest gwiazdą.
N, M <= 200,000

Wejście:
5 4
3 2
1 3
3 5
4 3

Wyjście:
TAK

Wejście:
3 3
1 2
2 3
1 3

Wyjście:
NIE


#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define pb push_back

const int MAX_N = 200005;

vector<vector<int>> adj(MAX_N);
vector<bool> visited(MAX_N);

void dfs(int s){
    visited[s] = true;
    for(int i : adj[s]){
        if(!visited[i]){
            dfs(i);
        }
    }
}


int main(){
    int n, m;
    cin >> n >> m;
    int ile = 0;
    for(int i = 0;i<m; i++){
        int a,b;
        cin >> a >> b;
        adj[a].pb(b);
        adj[b].pb(a);
    }
    dfs(1);
    bool spojny = true;
    for(int i = 1; i <= n; i++){
        spojny &= visited[i];
    }
    if(!spojny) {
        cout << "NIE" << endl;
        return 0;
    }
    for(int i = 1; i<=n; i++){
        if(adj[i].size() > 1){
            ile++;
        }
        else if(adj[i].size() == 0){
            cout << "NIE" << endl;
            return 0;
        }
    }
    if(ile == 1){
        cout << "TAK" << endl;
    }
    else{
        cout << "NIE" << endl;
    }
}





#include <iostream>
using namespace std;

const int MAX = 200005;
int occurences[MAX];

int main()
{
    int n, m;
    cin >> n >> m;

    for (int i = 0; i < m; i++)
    {
        int p, q;
        cin >> p >> q;
        occurences[p]++;
        occurences[q]++;
    }

    if (m != n - 1)
    {
        cout << "NIE\n";
        return 0;
    }

    for (int i = 1; i <= n; i++)
    {
        if (occurences[i] == m)
        {
            cout << "TAK\n";
            return 0;
        }
    }

    cout << "NIE\n";
    return 0;
}


2) ścieżka - można wierzchołki uporządkować w rzędzie, żeby pomiędzy kolejnymi zawsze była krawędź
N, M <= 200,000

Wejście:
4 3
3 1
4 1
2 3


Wyjście:
TAK


Wejście:
3 3
1 2
2 3
1 3

Wyjście:
NIE



#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define pb push_back

const int MAX_N = 200005;

vector<vector<int>> adj(MAX_N);
vector<bool> visited(MAX_N);

void dfs(int s){
    visited[s] = true;
    for(int i : adj[s]){
        if(!visited[i]){
            dfs(i);
        }
    }
}

int main(){
    int n, m;
    cin >> n >> m;
    int ile1 = 0;
    for(int i = 0;i<m; i++){
        int a,b;
        cin >> a >> b;
        adj[a].pb(b);
        adj[b].pb(a);
    }

    dfs(1);
    bool spojny = true;
    for(int i = 1; i <= n; i++){
        spojny &= visited[i];
    }
    if(!spojny) {
        cout << "NIE" << endl;
        return 0;
    }

    for(int i = 1; i<=n; i++){
        if(adj[i].size() == 1){
            ile1++;
        }
        if(adj[i].size() > 2){
            cout << "NIE" << endl;
            return 0;
        }
    }
    if(ile1 == 2){
        cout << "TAK" << endl;
    }
    else{
        cout << "NIE" << endl;
    }
}



#include <iostream>
using namespace std;

const int MAX = 200005;
int occurences[MAX];

int main()
{
    int n, m;
    cin >> n >> m;

    for (int i = 0; i < m; i++)
    {
        int p, q;
        cin >> p >> q;
        occurences[p]++;
        occurences[q]++;
    }

    int oneConnections = 0;
    int twoConnections = 0;
    for (int i = 1; i <= n; i++)
    {
        switch (occurences[i])
        {
            case 1:
                oneConnections++;
                break;
            case 2:
                twoConnections++;
                break;

            default:
                cout << "NIE\n";
                return 0;
                break;
        }
    }

    if (oneConnections == 2 && twoConnections == n - 2)
    {
        cout << "TAK\n";
    }
    else
    {
        cout << "NIE\n";
    }
    return 0;
}



3) Lista kontaktów (str. 134)



#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define pb push_back
const int MAX = 1000000;

vector<int> id(MAX+2, 0);
vector<vector<int>> adj(MAX);

void DFS(int s, int iden){
	id[s] = iden;
	for(int u : adj[s]){
		if(id[u] == 0){
			DFS(u, iden);
		}
	}
}

void solve(){
	int n,m;
	cin >> n >> m;
	for(int i = 0; i<m; i++){
		int a, b;
		cin >> a >> b;
		adj[a].pb(b);
		adj[b].pb(a);
	}
	//dfs dla kolejnych wierzcholkow ktore nie maja id:
	for(int i = 1; i<n+1; i++){
		if(id[i]==0){
			DFS(i,i);
		}
	}


	int z;
	cin >> z;
	for(int i = 0; i<z; i++){
		int a, b;
		cin >> a >> b;
		if(id[a] == id[b]){
			cout << "TAK" << endl;

		else{
			cout << "NIE" << endl;
		}
	}
}
int main(){
	solve();
	return 0;
}




==== Drzewa ====

Liść to wierzchołek, który ma dokładnie jednego sąsiada.


Drzewa ukorzenione
    -> takie, które mają korzeń (wyróżniony wierzchołek)

Drzewa nieukorzenione
    -> które nie mają korzenia (wyrożnionego wierzchołka)



Ćwiczenie 1:
Policz głębokość drzewa.
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

typedef long long ll;

const int MAX_N = 100005;

vector<int> graf[MAX_N];
int gl[MAX_N];

void dfs(int v) {
    for(int u : graf[v]) {
        if(gl[u] == 0) {
            gl[u] = gl[v] + 1;
            dfs(u);
        }
    }
}

int main() {
    int n;
    cin >> n;

    for(int i = 1; i < n; i++) {
        int a, b;
        cin >> a >> b;
        graf[a].push_back(b);
        graf[b].push_back(a);
    }

    gl[1] = 1;
    dfs(1);

    int wynik = gl[1];
    for(int i = 1; i <= n; i++) {
        wynik = max(wynik, gl[i]);
    }
    cout << wynik;

    return 0;
}


Ćwiczenie 2:
Policz rozmiary poddrzew.

#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

typedef long long ll;

const int MAX_N = 100005;

vector<int> graf[MAX_N];
int rozmiar[MAX_N];

void dfs(int v) {
    rozmiar[v] = 1;
    for(int u : graf[v]) {
        if(rozmiar[u] == 0) {
            dfs(u);
            rozmiar[v] += rozmiar[u];
        }
    }
}

int main() {
    int n;
    cin >> n;

    for(int i = 1; i < n; i++) {
        int a, b;
        cin >> a >> b;
        graf[a].push_back(b);
        graf[b].push_back(a);
    }

    dfs(1);

    int wynik = rozmiar[1];
    for(int i = 1; i <= n; i++) {
        wynik = max(wynik, rozmiar[i]);
    }
    cout << wynik;

    return 0;
}


Ćwiczenie 3:
Dla każdego wierzchołka policz, ile można iść w dół.

#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

typedef long long ll;

const int MAX_N = 100005;

vector<int> graf[MAX_N];
bool odwiedzony[MAX_N];
int dol[MAX_N];

void dfs(int v) {
    odwiedzony[v] = true;
    for(int u : graf[v]) {
        if(!odwiedzony[u]) {
            dfs(u);
            dol[v] = max(dol[v], 1 + dol[u]);
        }
    }
}

int main() {
    int n;
    cin >> n;

    for(int i = 1; i < n; i++) {
        int a, b;
        cin >> a >> b;
        graf[a].push_back(b);
        graf[b].push_back(a);
    }

    dfs(1);

    for(int i = 1; i <= n; i++) {
        cout << dol[i] << " ";
    }

    return 0;
}


Ćwiczenie 4:
Znajdź długość najdłuższej ścieżki w drzewie.

Pomysł 1:
1. Dla każdego wierzchołka liczymy, ile można zrobić kroków w dół (patrz ćwiczenie 3).
2. Dla każdego wierzchołka liczymy, jaka jest najdłuższa ścieźka,
która ma w tym wierzchołku "przełamanie" (najwyższy punkt ścieżki).
3. Spośród powyższych wyników wybieramy maksa.

Pomysł 2:
1. Puść dfsa z dowolnego wierzchołka (np. 1) i znajdź najdalszy punkt [to jest jeden z końców ścieżki].
2. Puść dfsa ze znalezionego końca. Najdalszy wierzchołek to będzie drugi koniec ścieżki.


Obserwacja:
Najdłuższe ścieżki przecinają się w środku.
    -> Jesli mamy nieparzyście wiele krawędzi, to środkiem jest krawędź.
    -> W przeciwnym przypadku jest to wierzchołek.


Praca domowa:
1) Napisz program, który sprawdzi, czy graf jest drzewem.
    -> Liczba krawędzi == Liczba wierzcholkow - 1
    -> Czy jest spójny?

Np.
Wejście:
4 3
3 1
4 1
2 3

Wyjście:
TAK

2) Implementacja Ćwiczenia 4 (dowolny z pomysłów).

3) Dane jest drzewo. N <= 200,000.
Policz, ile jest najdłuższych ścieżek.
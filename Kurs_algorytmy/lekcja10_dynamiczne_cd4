10.04.2021 12:00

Bartek Łukasiewicz [obecny]

Mateusz Filipowicz [ok]
Paulina Nguyen [ok]
Andrzej Wróblewski[OK]
Adam Pawlak[OK]
Krzysztof Ligarski [OK]
Dominik Szczepaniak [jestem]
Wiktor Stojek
Andrzej Świętek [ok]
Piotr Bonar[ok]
Damian Żabicki[ok]
Jerzy Puchalski
Grzegorz Iwaszkiewicz[ok]
Mikołaj Szczerbetka


Praca domowa:
Implementacja https://codeforces.com/problemset/problem/446/A

boni1932
// Krzysztof L.
#include <iostream>
using namespace std;

int main()
{
    int n;
    cin >> n;

    int input[n + 5];

    int L[n + 5];
    L[1] = 1;

    int P[n + 5];
    P[n] = 1;

    int result = 0;

    cin >> input[1];
    for (int i = 2; i <= n; i++)
    {
        cin >> input[i];
        if (input[i] > input[i - 1])
        {
            L[i] = L[i - 1] + 1;
        }
        else
        {
            L[i] = 1;
        }
        result = max(result, L[i]);
    }

    for (int i = n - 1; i >= 1; i--)
    {
        if (input[i] < input[i + 1])
        {
            P[i] = P[i + 1] + 1;
        }
        else
        {
            P[i] = 1;
        }
    }

    if (result < n)
    {
        result += 1;
    }

    for (int i = 2; i < n; i++)
    {

        ///            _ i _
        if (input[i - 1] + 2 <= input[i + 1])
        {
            result = max(result, L[i - 1] + 1 + P[i + 1]);
        }
    }

    cout << result << "\n";
    return 0;
}


// Dominik
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define pb push_back

int main() {
    int n;
    cin >> n;
    vector<int> input(n+2);
    for(int i = 1; i<=n; i++){
        cin >> input[i];
    }
    vector<int> lewo(n+2);
    vector<int> prawo(n+2);
    for(int i = 1; i<=n; i++){
        if(i != 1 && input[i] > input[i-1]){
            lewo[i] = lewo[i-1] + 1;
        }
        else{
            lewo[i] = 1;
        }
    }
    for(int i = n; i>=1; i--){
        if(i != n && input[i] < input[i+1]){
            prawo[i] = prawo[i+1] + 1;
        }
        else{
            prawo[i] = 1;
        }
    }
    int ans = 1;
    for(int i = 1; i<=n; i++){
        ans = max(ans, 1+lewo[i-1]);
        ans = max(ans, 1+prawo[i+1]);
        if(input[i+1] - input[i-1] >= 2){
            ans = max(ans, 1+lewo[i-1] + prawo[i+1]);
        }
    }
    cout << ans << endl;
    return 0;
}

Implementacja Jaki jest najdłuższy podciąg, że najpierw same 'a', potem 'b' i 'c'?

//Dominik
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define pb push_back

const int MAX = 100000;

int DP[3][MAX+5];

int main() {
    string s;
    cin >> s;
    s = "?" + s;
    int n = s.length();
    DP[0][0] = 0;
    DP[1][0] = 0;
    DP[2][0] = 0;
    for(int i = 1; i<=n; i++){
        if(s[i] == 'a'){
            DP[0][i] += 1;
        }
        DP[0][i] += DP[0][i-1];
    }
    for(int i = 1; i<= n; i++){
        if(s[i] == 'b') {
            DP[1][i] = 1 + DP[1][i-1];
        }
        else{
            DP[1][i] = max(DP[0][i], DP[1][i-1]);
        }
    }
    for(int i = 1; i<= n; i++){
        if(s[i] == 'c'){
            DP[2][i] = 1 + DP[2][i-1];
        }
        else{
            DP[2][i] = max(DP[1][i], DP[2][i-1]);
        }
    }
    cout << DP[2][n] << endl;
    return 0;
}

// Krzysztof L.
#include <iostream>
using namespace std;

const int LETTERS = 3;

int main()
{
    string s;
    cin >> s;

    int len = s.length();
    s = " " + s;
    int DP[len + 1][LETTERS + 1];

    for (int l = 0; l <= LETTERS; l++)
    {
        DP[0][l] = 0;
    }

    for (int i = 1; i <= len; i++)
    {
        DP[i][0] = 0;
    }

    for (int l = 1; l <= LETTERS; l++)
    {
        for (int i = 1; i <= len; i++)
        {
            DP[i][l] = max(DP[i][l - 1], DP[i - 1][l]);
            if (s[i] == 'a' + l - 1)
            {
                DP[i][l] = DP[i - 1][l] + 1;
            }
        }
    }

    cout << DP[len][LETTERS] << "\n";
    return 0;
}

Do pomyślenia: https://www.spoj.com/SHORTEN/problems/BINOMIAL/



//Dominik
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define pb push_back

int DP[1005][1005]; //n, k

void BC(int n, int k){
    for(int i = 0; i<=n; i++){
        for(int j = 0; j<=i; j++){
            if(j==0 || i == j){
                DP[i][j] = 1;
            }
            else{
                DP[i][j] = DP[i-1][j-1] + DP[i-1][j];
            }
        }
    }
}

int main() {
    BC(1002, 1002);
    int t;
    cin >> t;
    while(t--){
        int n, k;
        cin >> n >> k;
        cout << DP[n][k] << endl;
    }

    return 0;
}


Do pomyślenia: Najdłuższy podciąg rosnący https://www.spoj.com/problems/ELIS
1 2 3 4 5
1 4 2 4 3
*   *   *

   1 4 2 4 3
[0 1 2 2 3 3]


#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define pb push_back



int main() {
    int n;
    cin >> n;
    vector<int> input(n+1);
    input[0] = -10;
    for(int i = 1;i <=n;i++){
        cin >> input[i];
    }
    vector<int> DP(n+1, 1);
    DP[0] = 0;
    int ans = 0;
    for(int i = 1; i<=n; i++){
        for(int j = 1; i-j >= 0; j++){
            if(input[i-j] < input[i]){
                DP[i] = max(DP[i], DP[i-j] + 1);
            }
        }
        ans = max(ans, DP[i]);
    }
    cout << ans << endl;

    return 0;
}




Zadanie 1:
Mamy pary liczb.
Z każdej chcemy wybrać jedną.
Czy można uzyskać sumę K?

Wejście:
5 11
(3) 2 -> 1 ?
1 (4) -> 3
(2) 3 -> 1
3 (1) -> 2
3 (1) -> 2

Wyjście:
LPLPP

Minimum = 2 + 1 + 2 + 1 + 1 = 7
Brakuje nam 11 - 7 = 4.

0 1 2 3 4 5 6 7 8
+ + + + + + + + + +


  (2)  5  (1)
************
   0 1 2 3 4 5 6 7 8 9
0  * - - - - - - - - -
1  + - * - - - - - - -
2  + - * - - + - + - -
3  + + + * - + + + + -

       Jak zbudować kwotę 3?


Mamy 11 ziko i chcemy całość wydać.
Kupić każdy towar (lewy albo prawy).


N par <= 100
L[i], P[i] <= 100
kwota <= 10,000

12:49



Zadanie 2:
Dany jest zbiór liczb.
Wybierze 3, żeby ich iloczyn miał jak najwięcej zer na końcu.
Ile może mieć zer?

N <= 200,000
A[i] <= 10^9

Wejście:
5
24 10 15 30 8
 *  *     *

24 * 10 * 30 = 7200

Wyjście:
2

13:13

Rozwiazanie O(N^3)
Weź każdą trójkę i policz, ile ma zer na końcu.

(5 * 5 * 2) * (5 * 2 * 2) * (2 * 2 * 2) =
2 x 6
5 x 3
10 x min(6,3) = 3


 2 5
 9 0
 0 9
 1 1 <-

 30 * 12 = 360 par
 (4, 2) = 2 * 2 * 2 * 2 * 3 * 3


24 10 15 30 8
24 = 2 * 2 * 2 * 3
10 = 2 * 5
15 = 3 * 5
30 = 2 * 3 * 5
8 = 2 * 2 * 2


zlicz
5\2 0 1 2 3
0         2
1   1 2
2
3


pary: (0,0), (0,1), .., (1,0), (1,1)...

      for rozklad1 in pary
        for rozklad2 in pary
            for rozklad3 in pary
                if zlicz jest rozklad1 && zlicz jest rozklad2 && zlicz jest rozklad3:
                    liczb zer na konce = min(ile5(rozklad1 + rozklad2 + rozklad3), ile2(rozklad1 + rozklad2 + rozklad3))


liczba1 * liczba2 * liczba3
  450       450        450


Praca domowa:
1) Implementacja zadania 1.
2) Implementacja zadania 2.
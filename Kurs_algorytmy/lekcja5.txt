13.02.2021 12:00


Bartek Łukasiewicz [obecny]

Mateusz Filipowicz [ok]
Paulina Nguyen [ok]
Andrzej Wróblewski[OK]
Adam Pawlak[OK]
Krzysztof Ligarski [ok]
Dominik Szczepaniak [ok]
Wiktor Stojek[OK]
Andrzej Świętek [ok]
Piotr Bonar[ok]
Damian Żabicki[ok]
Jerzy Puchalski[ok]
Grzegorz Iwaszkiewicz[ok]


Rozgrzewka
Znajdź liczbę, która jest pierwsza i suma jej cyfr wynosi 47.

389999

#include <bits/stdc++.h>
using namespace std;
#define ll long long

bool isPrime(long long num)
{
    int skip=0;
    if(num<2)
        return false;
    else if(num==2)
        return true;
    long long limit=sqrt(num);
    if(num%2==0)
        return false;
        for(int j=3; j<=limit; j+=2){
            if(num%j==0)
                return false;
            }
    return true;
}

int count(ll b){
    int suma = 0;
    while(b>0){
        suma += b%10;
        b/=10;
    }
    return suma;
}

int main(){
    for(int i = 100000; i<INT_MAX; i++){
        if(isPrime(i) == true && count(i) == 47){
            cout << i << endl;
            break;
        }
    }
    return 0;


}


999983
****--
 36  3
    8

119999351

6
2  3  1  4  2  1
6  3  8  8 10 14
2  0  1  2  3 -1


// Krzysztof L.
#include <iostream>
#define ll long long
using namespace std;

int n;

ll getSum(int pos, int radius, ll prefixSums[])
{
    // ......[....pos....]..........
    int start = max(1, pos - radius);
    int end = min(pos + radius, n);
    return prefixSums[end] - prefixSums[start - 1];
}

int main()
{

    cin >> n;

    int values[n + 1];
    ll prefixSums[n + 1];
    prefixSums[0] = 0;
    int expectedSums[n + 1];

    for (int i = 1; i <= n; i++)
    {
        cin >> values[i];
        prefixSums[i] = prefixSums[i - 1] + values[i];
    }
    for (int i = 1; i <= n; i++)
    {
        cin >> expectedSums[i];
    }

    for (int i = 1; i <= n; i++)
    {
        // Additional case if expected sum is not possible
        if (expectedSums[i] > prefixSums[n])
        {
            cout << "-1 ";
            continue;
        }

        // Start, end - min and max size of the radius
        int start = 0, end = n - 1;
        while (start < end)
        {
            int radius = (start + end) / 2;
            if(getSum(i, radius, prefixSums) < expectedSums[i])
            {
                start = radius + 1;
            }
            else
            {
                end = radius;
            }
        }

        cout << start << " ";
    }
    return 0;
}


Deski

4 5
1 4
4 5
5 9
8 10
4 6 7 10 2
*****


------1---1------1-----1--->
   ***********




// Krzysztof L.
#include <iostream>
using namespace std;

const int MAX = 1000000;

int planks, nails;

int pref[MAX + 5];

bool arePlanksNailed(int pos, int s[], int e[], int nail[])
{
    for(int i = 0; i <= MAX; i++) {
        pref[i] = 0;
    }
    for(int i = 0; i <= pos; i++) {
        pref[nail[i]] = 1;
    }
    for(int i = 1; i <= MAX; i++) {
        pref[i] += pref[i - 1];
    }

    for(int i = 0; i < planks; i++) {
        if(pref[e[i]] - pref[s[i] - 1] == 0) {
            return false;
        }
    }
    return true;
}

int main()
{
    cin >> planks >> nails;

    // Start & end
    int s[planks], e[planks];
    int nail[nails];
    for (int i = 0; i < planks; i++)
    {
        cin >> s[i] >> e[i];
    }

    for (int i = 0; i < nails; i++)
    {
        cin >> nail[i];
    }

    int start = 0, end = nails - 1;
    while (start < end)
    {
        int mid = (start + end) / 2;
        if (!arePlanksNailed(mid, s, e, nail))
        {
            start = mid + 1;
        }
        else
        {
            end = mid;
        }
    }
    cout << start + 1 << "\n";
    return 0;
}




================ Gąsienica ==================
Ćwiczenie
Ciąg zawiera liczby dodatnie.

   6  2  7  4  1  3  6
               *******

Ile w tym ciągu jest fragmentów, które mają sumę 12?


Zadanie 1:
Dany jest ciąg liczb.

N, M <= 300,000

N M

Wejście:
5 3
1 3 2 2 3  <- ciąg ma wartości [1;M]
***   ***
  ***
*****

Wynik:
9
Ile jest fragmentów, które składają się z różnych liczb naturalnych?

  1 3 2 2 3
      *
    ***
  *****

          * 1
        *** 2
      *     1
    ***     2
  *****     3
           ===
            9

   p***************----->
 ******************

#include <iostream>
using namespace std;

const int MAX = 300005;

int n, m, A[MAX];
bool czy[MAX];

int main() {
    cin >> n >> m;

    for(int i = 1; i <= n; i++) {
        cin >> A[i];
    }

    long long wynik = 0;
    int kon = 0;
    for(int pocz = 1; pocz <= n; pocz++) {
        while(kon < n && !czy[A[kon + 1]]) {
            kon++;
            czy[A[kon]] = true;
        }
        wynik += kon - pocz + 1;
        czy[A[pocz]] = false;
    }

    cout << wynik;

    return 0;
}


Zadanie 2:
Dane jest słowo złożone z małych liter alfabetu angielskiego.
Jaki jest najdłuższy fragment tego słowa, który zawiera wystąpienia co najwyżej
dwóch różnych liter.

|S| <= 500,000

Wejście:
abbcbaccbcbca
           **

Wyjście:
6


Praca domowa:
- Implementacja zadania Tort (str. 84)
- Implementacja zadania2.
- Wycinek (str 90)


27 lutego zajęcia intensywne OIJ jacektomasiewicz.pl
28 lutego LOGIA
